// 행렬의 덧셈

// 문제 설명
// 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 
// 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.

// 제한 조건
// 행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다.

// 입출력 예
// arr1	arr2	return
// [[1,2],[2,3]]	[[3,4],[5,6]]	[[4,6],[7,9]]
// [[1],[2]]	[[3],[4]]	[[4],[6]]

// 풀이
// function solution(arr1, arr2) {
//     var answer = [[]];
//     return answer;
// }

// 사고회로


// 풀이
function solution(arr1, arr2) {
    var answer = []; // 답을 배열안에 담을 거기 때문에 배열을 만든다
    for (var i=0; i<arr1.length; i++){ 
        answer[i] = [];  // [i]번째 인덱스에 빈 배열을 넣어주는 코드다
        // 이중 배열 answer를 초기화하기 위해 사용
        // answer는 arr1 과 arr2의 합을 담아내는 배열인데, 이중 배열의 각각의
        // 배열들도 초기화되어 있어야 한다
        // 이 코드를 사용하지 않으면 answer 배열은 초기화되지 않은 상태이기 때문에
        // push 메서드를 적용할 수 없다
        for(var j=0; j<arr1[i].length; j++){
            // arr1과 arr2 의 각각 같은 배열안에 있는 같은 인덱스 숫자를 반복해서 찾는다
            answer[i].push(arr1[i][j] + arr2[i][j]);
            // arr1[0][0] 과 arr2[0][0]끼리 더 하면서
            // answer[i] 배열에 arr1 과 arr2 배열의 각 요소의 합을 담는다 
            // arr1과 arr2 의 같은 배열의 같은 요소끼리 더 한 값을
            // answer = [[],[]] 이렇게 되어있는 곳에 차곡차곡 하나씩 담는다 
        }
    }

    return answer;
}


// 용어
// push() : 배열의 끝에 하나 이상의 요소를 추가하고, 배열의 새로운 길이를 반환한다


// 영어단어


// 생각정리
// 다른 사람의 풀이를 보고 풀었다 너무 어려웠다
// 어떻게 arr2에 접근을 한다는 것인지 이해하지 못 했었다
// chat gpt , 구글링, 지인의 도움등으로
// 왜 answer[i] = []; 를 해야하는지도 알게됐고
// for(var j=0; j<arr1[i].length; j++){
// answer[i].push(arr1[i][j] + arr2[i][j]); // 의 코드를
// 해석을 했다