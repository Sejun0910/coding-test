// 정수 제곱근 판별

// 문제 설명
// 임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
// n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 
// -1을 리턴하는 함수를 완성하세요.

// 제한 사항
// n은 1이상, 50000000000000 이하인 양의 정수입니다.

// 입출력 예
// n	return
// 121	144
// 3	-1

// 입출력 예 설명
// 입출력 예#1
// 121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.

// 입출력 예#2
// 3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.

// 문제
// function solution(n) {
//     var answer = 0;
//     return answer;
// }

// 사고회로
// 제곱근의 문제다 제곱근에 대한 접근방식이 처음이라 고민을 하다가
// 제곱근 관련 함수가 있을 것 같아서 구글링을 해서 입력받은 n을 어떤 x의 값과 x의 값을 곱했을 때
// 나오는 값인지 확인하고 그 값을 나눴을 때 나머지가 1 이 되냐 

// 풀이

var n = 169

function solution(n) {
    return Math.sqrt(n) %1 ==0 ? Math.pow(Math.sqrt(n)+1,2) : -1
    // 입력받은 n을 sqrt를 사용해 제곱근을 구한뒤에 그걸 1로 나눴을때 나머지가 0 이냐고 묻는 삼황연산자를 만들었다
    // 만약 n이 1로 나눴을 때 값이 0이 되지 않는다면 양의 정수 x의 제곱이 아니라는 뜻이 된다
    // Math.sqrt(n) %1 == 0 은 어떤 정수의 제곱이라면 참이 되는 것이고 아니라면 거짓이 되는 질문이다
    // 참이라면 Math.sqrt를 이용해 입력받은 정수의 제곱근을 구해 거기에 1을 더해서 2제곱을 하고
    // Math.pow를 사용해 제곱한 값을 반환시켜 출력한다
    // 거짓이라면 (n이 1로 나눴을 때 값이 0이 되지 않는다면을 의미) -1 을 출력

    // 왜 0이 되야 하냐? 만약 n에 3을 입력 받았다고 가정을 하면
    // Math.sqrt(3) 은 1.7320508075... 와 같은 정수가 아닌 값이다
    // 따라서 Math.sqrt(3) % 1 의 값은 0.73205080... 가 되기 때문에
    // Math.sqrt(n) % 1 == 0 조건이 거짓이 된다! 0이 되지않음!
}

console.log(solution(n));


// 용어
// Math.sqrt() : 이 함수는 입력받은 숫자의 제곱근을 반환한다
// Math.pow : 제곱한 값을 반환하는 함수
// Math.pow 사용법 -> Math.pow(base, exponent) 
// base는 밑값 exponent 제곱하기 위해 사용하는 지수이다 즉, base^exponent 를 반환한다

// 영어단어
// sqrt : square root 라는 제곱을 의미한다
// pow : power의 약어다 수학에서는 제곱을 의미


// 생각정리
// 제곱을 쓰는 법은 몰랐었는데 sqrt를 이용해 어떤 값으로 제곱을 했는지 알 수 있고
// pow를 이용해 제곱하는 법을 배웠다