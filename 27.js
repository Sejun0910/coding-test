// 콜라츠 추측

// 문제 설명
// 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 
// 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

// 1-1. 입력된 수가 짝수라면 2로 나눕니다. 
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
// 예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 
// 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 
// 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

// 제한 사항
// 입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

// 입출력 예
// n	result
// 6	8
// 16	4
// 626331	-1

// 입출력 예 설명
// 입출력 예 #1
// 문제의 설명과 같습니다.

// 입출력 예 #2
// 16 → 8 → 4 → 2 → 1 이 되어 총 4번 만에 1이 됩니다.

// 입출력 예 #3
// 626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야 합니다.

// 문제
// function solution(num) {
//     var answer = 0;
//     return answer;
// }

// 사고회로
// 어떤 수를 받았을 때 짝수라면 2로 나누고 홀수라면 3을 곱하고 1을 더하는 것을
// 결과로 나온 값이 1이 될 때까지 반복해야 한다고 했으니
// while문을 돌려 그 수가 2로 나눴을 때 나머지가 0이면 짝수이니 통과
// 0이 되지않는 다면 홀수이니 3을 곱하고 1을 더하고 다시 반복
// 반복하기전에 횟수를 세야하니 하나의 변수를 만들어 1을 추가
// 이것을 계속 반복하고 500번을 시도했을 때도 끝나지 않으면 -1을 출력

// 풀이
var num = 16

function solution(num) {
    let result = 0; // 우리는 500번 시도해도 값이 안 나오면 -1을 출력해야
    // 하기 때문에 횟수를 세기 위한 변수를 하나 만든다

    while (num != 1){ // 입력받은 num이 1이냐? 우리가 1이 될 때까지 이 반복을 작업중이다
        if (num % 2 == 0){ // 입력받은 num이 2로 나눴을 때 나머지가 0이냐 (짝수냐고 묻는 질문)
            num /= 2; // 만약 num이 16이라면 16 나누기(/) 2를 해서 8이 되는 값을 다시 num에 넣는다는 코드
        } else { // 그게 아니라면 (홀수라면)
            num = (num * 3) + 1; // num의 값에서 3을 곱하고 1을 더한 뒤에 num에 넣는다
        }
        result += 1; // 이 과정을 반복할 때마다 result(횟수를 담는 변수)에 1을 추가 횟수를 세는 용도
    }
    if (result >= 500 ) { // 이 과정을 500번을 시도 했을 경우엔
        return -1; // -1을 출력
    } else {
        return result;
    }
}

console.log(solution(num));


// 용어
// while() : while()안에 조건문이 참일 때 실행하는 반복문이다
// != (부등 연산자) : 자동으로 형 변환을 수행해서 좌항과 우항을 비교한다 값이 다르면 true 같으면 false를 반환한다
// % (나머지 연산자) : 자동으로 숫자열로 변환하고 좌항을 우항으로 나눴을 때 나오는 나머지 값을 구하는 연산자
// /= (나누기 등호 연산자) : 원래 있던 좌항(원래 있던 값)에서 우항의 값으로 나누라는 뜻 


// 영어단어


// 생각정리
// while() 을 응용해서 풀어본 건 처음인데 for문과 if문 처럼 익숙하지 않아서
// 앞으로 while문을 사용해서 만들 수 있는 문제면 많이 사용해봐야 할 거 같다
// while 안에 조건문은 참일 때 실행하기 때문에 그거에 맞는 조건문을 짜야한다는 것을 알았다