// 약수의 개수와 덧셈

// 문제 설명
// 두 정수 left와 right가 매개변수로 주어집니다. left부터 right까지의 모든 수들 중에서, 
// 약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 1 ≤ left ≤ right ≤ 1,000

// 입출력 예
// left	right	result
// 13	17	43
// 24	27	52

// 입출력 예 설명
// 입출력 예 #1
// 다음 표는 13부터 17까지의 수들의 약수를 모두 나타낸 것입니다.
// 수	약수	약수의 개수
// 13	1, 13	2
// 14	1, 2, 7, 14	4
// 15	1, 3, 5, 15	4
// 16	1, 2, 4, 8, 16	5
// 17	1, 17	2
// 따라서, 13 + 14 + 15 - 16 + 17 = 43을 return 해야 합니다.

// 입출력 예 #2
// 다음 표는 24부터 27까지의 수들의 약수를 모두 나타낸 것입니다.
// 수	약수	약수의 개수
// 24	1, 2, 3, 4, 6, 8, 12, 24	8
// 25	1, 5, 25	3
// 26	1, 2, 13, 26	4
// 27	1, 3, 9, 27	4
// 따라서, 24 - 25 + 26 + 27 = 52를 return 해야 합니다.

// 문제
// function solution(left, right) {
//     var answer = 0;
//     return answer;
// }

// 사고회로
// 먼저 약수의 개수를 구하고 구한 총 약수의 개수가
// 짝수일 때와 홀수일 때를 구분해서 더하고 빼면 될 거 같다


// 풀이
function solution(left, right) {
    let answer = 0; // 짝수와 홀수일 때 더하고 뺀 결과값을 담을 변수 
    for(let i=left; i<=right; i++) { // left부터 right까지의 모든 수라고 했으니 
        // i를 left로 선언한 후 left부터 right까지 돌린다
    let p = 1; // p는 약수의 개수를 저장하기 위한 변수이다 1로 선언한 이유는 
    // 모든 숫자는 1로 나누어 떨어지니깐 p의 초기값을 1로 설정한 것이다
      for(j=2; j<=i; j++) { // 입력받은 left를 i로 선언했었고 j=2 로 선언했으니
        // i를 2부터 나눠서 약수인지 확인하기 위한 코드이다
        if(i%j == 0) p++; // i를 j로 나눴을 때 나머지가 0이라면 p 에 1을 더한다
    }

      if(p % 2 == 0) answer += i; // p를 2로 나눴을 때 나머지가 0이라면 짝수이니 answer에 값을 양수로 더한다
      else answer -= i; // 나머지가 0이 아니라면 홀수이니 answer에 값을 음수로 더한다
    }

    return answer;
}


// 용어


// 영어단어


// 생각정리
// left부터 right까지 하나하나 숫자의 약수의 개수를 구하고
// 그 개수가 짝수일 때와 홀수일 때를 구분해서
// 그 값을 양수로 넣을지 음수로 넣을지 구분해서 값을 구하면 되는 문제였다
// 약수의 개수를 구하는 코드를 만들 때 p를 처음에 0으로 했었는데
// 모든 숫자는 1이 약수로 들어가기 때문에 p를 1로 선언해야 한다는 것을
// 알게됐다