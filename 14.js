// 나누어 떨어지는 숫자 배열

// 문제 설명
// array의 각 element 중 divisor로 나누어 떨어지는 값을 
// 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.
// divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.

// 제한사항
// arr은 자연수를 담은 배열입니다.
// 정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.
// divisor는 자연수입니다.
// array는 길이 1 이상인 배열입니다.

// 입출력 예
// arr	divisor	return
// [5, 9, 7, 10]	5	[5, 10]
// [2, 36, 1, 3]	1	[1, 2, 3, 36]
// [3,2,6]	10	[-1]

// 입출력 예 설명
// 입출력 예#1
// arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.

// 입출력 예#2
// arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.

// 입출력 예#3
// 3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다.

// 문제
// function solution(arr, divisor) {
//     var answer = [];
//     return answer;
// }

// 사고회로
// for문을 사용해 입력받은 arr을 divisor로 나눴을 경우 나머지가 0 이면
// 배열에 담고 아니라면 담지않는다 그리고 만약에 하나도 없다면 -1을 출력(return)


// 풀이
function solution(arr, divisor) {
    var answer = [];
    
    for (let i=0; i<arr.length; i++) {
        if (arr[i] % divisor == 0) { // arr에 i번째를 divisor로 나눴을때 나머지가 0이라면
            answer.push(arr[i]) // 그 i를 answer에 푸시해서 넣어준다
        }
    }
    return answer.length == 0? [-1]:answer.sort((a,b)=>a-b); // answer에 길이가 0이냐? 
    // (나눴을 때 나머지가 0인게 하나도 없냐고 물어보는 뜻)
    // 하나도 없으면 -1 을 출력 그게 아닌(안에 담긴 게 있다면) answer를 sort함수로 오름차순 정렬해서 반환한다.
    // sort함수를 사용해 오름차순으로 정렬되어 직관적인 결과를 얻기위해 사용함.
    // 입출력 예시에 오름차순으로 정렬하라고 써 있음.
}


// 용어
// sort : 배열의 요소들을 정리


// 영어단어


// 생각정리
// 처음에 sort라는 함수를 사용 할 생각을 안 해서 실패를 했었는데
// 문제에서 오름차순으로 정리하라고 명시되어 있기 때문에 sort를 사용해서 answer안에 담긴 것을
// sort 를 사용해 오름차순으로 정리함