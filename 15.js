// 내적

// 문제 설명
// 길이가 같은 두 1차원 정수 배열 a, b가 매개변수로 주어집니다. 
// a와 b의 내적을 return 하도록 solution 함수를 완성해주세요.
// 이때, a와 b의 내적은 a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] 입니다. (n은 a, b의 길이)

// 제한사항
// a, b의 길이는 1 이상 1,000 이하입니다.
// a, b의 모든 수는 -1,000 이상 1,000 이하입니다.

// 입출력 예
// a	b	result
// [1,2,3,4]	[-3,-1,0,2]	3
// [-1,0,1]	[1,0,-1]	-2

// 입출력 예 설명
// 입출력 예 #1

// a와 b의 내적은 1*(-3) + 2*(-1) + 3*0 + 4*2 = 3 입니다.
// 입출력 예 #2

// a와 b의 내적은 (-1)*1 + 0*0 + 1*(-1) = -2 입니다.

// 문제
// function solution(a, b) {
//     var answer = 1234567890;
//     return answer;
// }

// 사고회로
// a 와 b 의 길이가 같기 때문에 for문을 돌려서 a의 길이까지 반복문을 돌려
// a와 b의 0번부터 같은 인덱스 번호의 숫자끼리 곱해서 answer에 넣으면서 for문을 돌리기


// 풀이
function solution(a, b) {
    var answer = 0;

    for(i=0; i<a.length; i++){ // 왜 a의 길이까지 돌리는가 : a와 b의 길이가 같기 때문에 a든 b든 상관없다
        answer += a[i]*b[i] // for문이 실행할 때마다 a의 i번째 정수와 b의 i번째 정수를 곱해서
        // answer 에 대입한다
    }

    return answer;
}

// 용어
// 내적 : 내적의 "적" 은 '쌓는다'는 뜻의 한자이고, 여기서는 '곱한다'는 뜻이다


// 영어단어


// 생각정리
// 길이가 같기 때문에 for문을 사용해 a와 b의 같은 인덱스끼리 곱하면서 한 변수에 값을 누적하고
// 입력받은 길이까지 for문을 돌리면 된다 